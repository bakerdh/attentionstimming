---
title: "Stimming paper"
author: "Cameron Smith & Daniel H. Baker"
execute: 
  echo: false
  include: false
  output: false
format: pdf
---

```{r setup}
#| warning: false

processdata <- 1

# install R packages
packagelist <- c('knitr','reticulate','osfr','bookdown') 
missingpackages <- packagelist[!packagelist %in% installed.packages()[,1]]
if (length(missingpackages)>0){install.packages(missingpackages)}
toinstall <- packagelist[which(!packagelist %in% (.packages()))]
invisible(lapply(toinstall,library,character.only=TRUE))

# create python environment and install packages
if (!dir.exists('env')){
  system('python3 -m venv env')
  system('source env/bin/activate')
  system('python3 -m pip install mne numpy scikit-learn matplotlib pandas')
}

use_virtualenv('env/')

if (!dir.exists('local/processed')){dir.create('local/processed')}

```

```{python ProcessExpt1}

# code to import raw EEG data and process

if r.processdata==1:

  import numpy as np
  import matplotlib.pyplot as plt
  import pandas as pd
  import mne
  from mne.decoding import (
      SlidingEstimator,
      GeneralizingEstimator,
      Scaler,
      cross_val_multiscore,
      LinearModel,
      get_coef,
      Vectorizer,
      CSP
  )

  from sklearn.pipeline import make_pipeline
  from sklearn.preprocessing import StandardScaler
  from sklearn.linear_model import LogisticRegression

  ANT_montage = mne.channels.make_standard_montage("standard_1020")
  reject_criteria = dict(eeg=150e-6)

  for subj in range(501,503):
    filename = "local/preprocessed/S" + str(subj) + ".set"
    raw = mne.io.read_raw_eeglab(filename,preload=True)
    raw.drop_channels(["HEOG", "VEOG"])
    raw.set_montage(ANT_montage)
  
    filtered = raw.filter(0.2,30)
  
    ica = mne.preprocessing.ICA(n_components=20, random_state=97, max_iter=800)
    ica.fit(filtered)
    ica.exclude = [1, 2]  # details on how we picked these are omitted here
    ica.apply(filtered)
  
    events, _ = mne.events_from_annotations(filtered)
  
    event_dict = {
        "cueleft": 4,
        "cueright": 5,
    }
  
    epochs = mne.Epochs(
        filtered,
        events,
        event_id=event_dict,
        tmin=-0.2,
        tmax=1,
        reject=reject_criteria,
        preload=True,
    )
  
    cueepochs = epochs["cueleft", "cueright"]
    X = cueepochs.get_data()  # MEG signals: n_epochs, n_meg_channels, n_times
    y = cueepochs.events[:, 2]  # target: auditory left vs visual left
    
    clf = make_pipeline(StandardScaler(), LogisticRegression(solver="liblinear"))
    
    time_decod = SlidingEstimator(clf, n_jobs=None, scoring="roc_auc", verbose=True)
    
    scores = cross_val_multiscore(time_decod, X, y, cv=10, n_jobs=None)
    
    # Mean scores across cross-validation splits
    scores = np.mean(scores, axis=0)

    filename = "local/processed/S" + str(subj) + "_decoding.csv"

    times = pd.Series(range(-200,1001))
    scores = pd.Series(scores)
    
    output = pd.concat([times,scores],axis=1)
    output.columns = ['Time','Accuracy']
    
    output.to_csv(filename,index=False)
    
```


# Abstract



# Introduction


# Methods


# Results


# Discussion


# References



